// Code generated by ease; DO NOT EDIT
package main

import (
	"github.com/gin-gonic/gin"
	"strconv"
	{{- range .Imports.Items }}
	{{ $.Identifier .Name .Path }} "{{ .Path }}"
	{{- end }}
)

type server struct {
	router *gin.Engine
	{{- range .Fields.Items }}
	{{ $.Identifier .Name .String }} *{{ $.TypeDeclaration . }}
	{{- end }}
}

func main() {
	s := &server{
		router: gin.Default(),
	}

	{{- range .Schema.Endpoints }}
	s.router.{{ .Method }}("{{ .Path }}", s.{{ $.Identifier .Handler.Name .Handler.String }})
	{{- end }}

	s.router.Run()
}
{{ range .Schema.Endpoints }}
func (s *server) {{ $.Identifier .Handler.Name .Handler.String }}(c *gin.Context) {
	{{- range .Params }}
	var {{ .Name }} {{ $.TypeDeclaration .Decl.Type }}
	{{- if .Decl.Type.IsContext }} = c.Request.Context()
	{{- else if eq .Src 1 }} = {{ if ne .Decl.Type.Name "string" }}paramToInt[{{ .Decl.Type.Name }}](c, "{{ .Name }}"){{ else }} c.Param("{{ .Name }}"){{ end }}
	{{- end }}

	{{- end }}
	{{- if .Handler.Returns }}
	{{ range $idx, $ret := .Handler.Returns -}}
	{{ if ne $idx 0 }}, {{ end }}{{ if $ret.Type.IsError }}err{{ else if eq $idx 0 }}ginResult{{ else }}_{{ end }}
	{{- end -}}
	:=
	{{- end -}}
	{{- if .Handler.Recv -}}
	s.{{ $.Identifier .Handler.Recv.Type.Name .Handler.Recv.Type.String }}.{{ .Handler.Name }}
	{{- else -}}
	{{ $.FuncDeclaration .Handler }}
	{{- end -}}
	(
	{{- range .Params}}
		{{ if .Decl.IsPointer }}&{{ end }}{{ .Name }},
	{{- end }}
	)
	{{- if .Handler.Returns.HasError }}
	if err != nil {
		handleError(c, err)
		return
	}
	{{- end }}
	{{- if .Returns }}
	c.JSON(200, ginResult)
	{{- end }}
}
{{ end }}
func paramToInt[T int | uint](c *gin.Context, name string) T {
	value, _ := strconv.Atoi(c.Param(name))
	return T(value)
}

type HttpError interface {
	error
	Status() int
}

func handleError(c *gin.Context, err error) {
	c.Error(err)

	httpErr, implementHttpErr := err.(HttpError)

	if !implementHttpErr {
		c.JSON(500, err)
		return
	}

	c.JSON(httpErr.Status(), err)
}