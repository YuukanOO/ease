// Code generated by ease; DO NOT EDIT
package main

import (
	"github.com/gin-gonic/gin"
	"strconv"
	{{- range $name, $pkg := .Imports }}
	{{ $pkg.Alias }} "{{ $pkg.Path }}"
	{{- end }}
)

type server struct {
	router *gin.Engine
	{{- range $name, $typ := .Fields }}
	{{ $typ.Alias }} *{{ $typ.Declaration }}
	{{- end }}
}

func main() {
	s := &server{
		router: gin.Default(),
	}

	{{- range .Schema.Endpoints }}
	// {{ .String }}
	{{- end }}

	s.router.Run()
}

{{- range .Schema.Endpoints }}
func (s *server) {{ .Handler.Name }}(c *gin.Context) {
	{{- range .Params }}
	var {{ .Name }} {{ .Decl.Type.Declaration }}
	{{- if .Decl.Type.IsContext }} = c.Request.Context()
	{{- else if eq .Src 1 }} = {{ if not (eq .Decl.Type.Name "string") }}paramToInt[{{ .Decl.Type.Name }}](c, "{{ .Name }}"){{ else }} c.Param("{{ .Name }}"){{ end }}
	{{- end }}
	{{- end }}
	{{ if .Handler.Recv }}
	s.{{ .Handler.Recv.Type.Alias }}.{{ .Handler.Name }}
	{{- else }}
	{{ .Handler.Declaration }}
	{{- end -}}
	(
	{{- range .Params}}
		{{ .Name }},
	{{- end }}
	)
}
{{ end }}
func paramToInt[T int | uint](c *gin.Context, name string) T {
	value, _ := strconv.Atoi(c.Param(name))
	return T(value)
}