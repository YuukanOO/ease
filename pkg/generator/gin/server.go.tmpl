{{- $ginResultName := $.Identifier "result" "easeGinHandlerResult" -}}
// Code generated by ease; DO NOT EDIT
package main

import (
	"github.com/gin-gonic/gin"
	"strconv"
	"net/http"
	{{- range .Imports.Items }}
	{{ $.Identifier .Name .Path }} "{{ .Path }}"
	{{- end }}
)

type Server struct {
	Router *gin.Engine
	{{- range .Fields.Items }}
	{{ $.Identifier .Name .String }} *{{ $.Declaration . }}
	{{- end }}
}

func NewServer() (s *Server, err error) {
	s = &Server{
		Router: gin.Default(),
	}

	{{- range .Dependencies.Items }}
	{{ range $idx, $ret := .Returns -}}
	{{ if ne $idx 0 }}, {{ end }}{{ if $ret.Type.IsError }}err{{ else }}s.{{ $.Identifier $ret.Type.Name $ret.Type.String }}{{ end }}
	{{- end -}}
	= {{ $.Declaration . }}()
	{{- if .Returns.HasError }}
	if err != nil {
		return nil, err
	}
	{{- end }}
	{{- end }}
	{{ range .Schema.Endpoints }}
	s.Router.{{ .Method }}("{{ .Path }}", {{ if .IsRaw }}gin.WrapF(
		{{- if .Handler.Recv -}}
		s.{{ $.Identifier .Handler.Recv.Type.Name .Handler.Recv.Type.String }}.{{ .Handler.Name }}
		{{- else -}}
		{{ $.Declaration .Handler }}
		{{- end -}}
	){{ else }}s.{{ $.Identifier .Handler.Name .Handler.String }}{{ end }})
	{{- end }}

	return s, nil
}

func (s *Server) Listen() {
	s.Router.Run()
}

func main() {
	s, err := NewServer()

	if err != nil {
		panic(err)
	}

	s.Listen()
}
{{ range .Schema.Endpoints }}
{{- if .IsRaw }}
{{- continue }}
{{- end }}
func (s *Server) {{ $.Identifier .Handler.Name .Handler.String }}(c *gin.Context) {
	{{- range .Params }}
	var {{ .Name }} {{ $.Declaration .Decl.Type }}
	{{- if .Decl.Type.IsContext }} = c.Request.Context()
	{{- else if .FromPath }} = {{ if ne .Decl.Type.Name "string" }}ParamToInt[{{ .Decl.Type.Name }}](c, "{{ .Name }}"){{ else }} c.Param("{{ .Name }}"){{ end }}
	{{- else if or .FromBody .FromQuery }}
	if !Bind(c, &{{ .Name }}) {
		return
	}
	{{- end }}

	{{- end }}
	{{- if .Handler.Returns }}
	{{ range $idx, $ret := .Handler.Returns -}}
	{{ if ne $idx 0 }}, {{ end }}{{ if $ret.Type.IsError }}err{{ else if eq $idx 0 }}{{ $ginResultName }}{{ else }}_{{ end }}
	{{- end -}}
	:=
	{{- end -}}
	{{- if .Handler.Recv -}}
	s.{{ $.Identifier .Handler.Recv.Type.Name .Handler.Recv.Type.String }}.{{ .Handler.Name }}
	{{- else -}}
	{{ $.Declaration .Handler }}
	{{- end -}}
	(
	{{- range .Params}}
		{{ if .Decl.IsPointer }}&{{ end }}{{ .Name }},
	{{- end }}
	)
	{{- if .Handler.Returns.HasError }}
	if err != nil {
		HandleError(c, err)
		return
	}
	{{- end }}
	{{- if .Returns }}
	c.JSON(http.StatusOK, {{ $ginResultName }})
	{{- else}}
	c.Status(http.StatusNoContent)
	{{- end }}
}
{{ end }}
func ParamToInt[T int | uint](c *gin.Context, name string) T {
	value, _ := strconv.Atoi(c.Param(name))
	return T(value)
}

type HttpError interface {
	error
	Status() int
}

func HandleError(c *gin.Context, err error) {
	c.Error(err)

	httpErr, implementHttpErr := err.(HttpError)

	if !implementHttpErr {
		c.JSON(http.StatusInternalServerError, err)
		return
	}

	c.JSON(httpErr.Status(), err)
}

func Bind[T any](c *gin.Context, target *T) bool {
	if err := c.ShouldBind(target); err != nil {
		c.AbortWithError(http.StatusUnprocessableEntity, err)
		return false
	}

	return true
}