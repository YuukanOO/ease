package ginhttp

import (
	"os"
	"path/filepath"
	"text/template"

	"github.com/YuukanOO/ease/pkg/generator"
	"github.com/YuukanOO/ease/pkg/parser/api"
)

var mainTemplate = template.Must(template.New("").Parse(`// Code generated by ease; DO NOT EDIT
package main

import (
	"github.com/gin-gonic/gin"
)

type server struct {
	router *gin.Engine
}

func main() {
	s := &server{
		router: gin.Default(),
	}

	{{ range .Endpoints }}
	// {{ .String }}
	{{ end }}

	s.router.Run()
}`))

type ginGenerator struct {
	schema *api.API
}

func New(schema *api.API) generator.Extension {
	return &ginGenerator{
		schema: schema,
	}
}

func (g *ginGenerator) Generate() error {
	wd, _ := os.Getwd()
	filename := filepath.Join(wd, "generated", "main.go")

	if err := os.MkdirAll(filepath.Dir(filename), 0644); err != nil {
		return err
	}

	file, err := os.OpenFile(filename, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)

	if err != nil {
		return err
	}

	defer file.Close()

	return mainTemplate.Execute(file, g.schema)
}
